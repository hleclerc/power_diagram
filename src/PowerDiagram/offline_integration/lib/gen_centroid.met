def rot90( P )
    return [ - P[ 1 ], P[ 0 ] ]

def part_int( coeffs, u0, u1, with_os = true )
    P0  := Vec[ Op, 2 ]( [ symbol( "P0.x" ), symbol( "P0.y" ) ] ) 
    P1  := Vec[ Op, 2 ]( [ symbol( "P1.x" ), symbol( "P1.y" ) ] ) 
    N   := rot90( P0 - P1 )
    u   := symbol( "u" )
    Pi  := ( 1 - u ) * P0 + u * P1
    r2  := dot( Pi, Pi )

    val := Op()
    for i in 0 .. coeffs.size
        val += coeffs[ i ] * dot( Pi, Pi ) ^ i

    r_x := polynomial_integration( 0.5 * val * N[ 0 ], u, u0, u1, deg_poly_max = 20 )
    r_y := polynomial_integration( 0.5 * val * N[ 1 ], u, u0, u1, deg_poly_max = 20 )

    # stdout <<< "    // " << r_x
    # stdout <<< "    // " << r_y

    cw := CodeWriter( "TF" )
    cw.add( "r_x", r_x, add )
    cw.add( "r_y", r_y, add )
    if with_os
        stdout << "    os << \"" << join( Vec[String]( split( cw.to_string( 4 ), "\n" ) ), "\\n\";\n    os << \"" ) << "\\n\";\n" 
    else
        stdout << cw.to_string( 4 )

# with only one coeff
max_d := 3
print "switch ( coeff_index ) {"
for i in 0 .. max_d
    print "case $i:"
    coeffs := Vec[ Op, max_d ]( x => 0 )
    coeffs[ i ] = symbol( "\" << coeff_val << \"" )
    part_int( coeffs, 0, 1 )
    print "    break;"
print "}"

# generic cases
for i in 1 .. 9
    print "if ( poly_coeffs.size() == $i ) {"
    part_int( Vec[ Op, i ]( x => symbol( "poly_coeffs[ $x ]" ) ), symbol( "u0" ), symbol( "u1" ), 0 )
    print "}"

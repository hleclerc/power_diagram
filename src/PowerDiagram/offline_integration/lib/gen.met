def rot90( P )
    return [ - P[ 1 ], P[ 0 ] ]

def part_int( coeffs, u0, u1, with_os = true )
    P0   := Vec[ Op, 2 ]( [ symbol( "P0.x" ), symbol( "P0.y" ) ] ) 
    P1   := Vec[ Op, 2 ]( [ symbol( "P1.x" ), symbol( "P1.y" ) ] ) 
    N    := rot90( P0 - P1 )
    u    := symbol( "u" )
    Pi   := ( 1 - u ) * P0 + u * P1
    r2   := dot( Pi, Pi )

    val := Op()
    for i in 0 .. coeffs.size
        val += coeffs[ i ] * dot( Pi, Pi ) ^ i
    val *= dot( Pi, N )

    res := polynomial_integration( val, u, u0, u1, deg_poly_max = 20 )

    # stdout <<< "    // " << res

    cw := CodeWriter( "TF" )
    cw.add( "result", res, init )
    if with_os
        stdout << "    os << \"" << join( Vec[String]( split( cw.to_string( 4 ) + "\n    return result;", "\n" ) ), "\\n\";\n    os << \"" ) << "\\n\";\n" 
    else
        stdout << cw.to_string( 4 )

# with only one coeff
max_d := 9
print "switch ( coeff_index ) {"
for i in 0 .. max_d
    print "case $i:"
    coeffs := Vec[ Op, max_d ]( x => 0 )
    coeffs[ i ] = symbol( "\" << coeff_val << \"" )
    part_int( coeffs, 0, 1 )
    print "    break;"
print "}"

# generic cases
for i in 1 .. 9
    print "if ( poly_coeffs.size() == $i ) {"
    part_int( Vec[ Op, i ]( x => symbol( "poly_coeffs[ $x ]" ) ), symbol( "u0" ), symbol( "u1" ), 0 )
    print "    return result;"
    print "}"

# print "    auto part_int = [&]( TF u0, TF u1, std::size_t index ) {"
# print "        switch ( index ) {"
# for cpt in 0 .. cuts.size
#     print "            case $cpt: {"
#     val := Op()
#     cut := cuts[ cpt ]
#     for i in 0 .. cut.coeffs.size
#         val += cut.coeffs[ i ] * dot( Pi, Pi ) ^ i
#     val *= dot( Pi, N )

#     res := polynomial_integration( val, u, symbol( "u0" ), symbol( "u1" ), deg_poly_max = 16 )

#     cw := CodeWriter( "TF" )
#     cw.add( "result", res, init )
#     stdout << cw.to_string( 16 )
#     print "                return result;"
#     print "            }"
# print "        }"
# print "        return TF( 0 );"
# print "    };"
